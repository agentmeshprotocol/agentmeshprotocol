name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Security and code quality checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python, javascript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Python testing and validation
  python-tests:
    name: Python Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for non-critical combinations
          - os: macos-latest
            python-version: "3.9"
          - os: windows-latest
            python-version: "3.9"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Run black formatter check
      run: black --check --diff .

    - name: Run isort import sorting check
      run: isort --check-only --diff .

    - name: Run flake8 linting
      run: flake8 .

    - name: Run mypy type checking
      run: mypy src/

    - name: Run pytest with coverage
      run: |
        pytest --cov=src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Protocol validation
  protocol-validation:
    name: Protocol Validation
    runs-on: ubuntu-latest
    needs: [python-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Validate JSON schemas
      run: |
        python -m src.validation.schema_validator docs/schemas/

    - name: Run protocol compliance tests
      run: |
        python -m pytest tests/protocol/ -v

    - name: Validate reference implementations
      run: |
        python docs/aip-validation-tools.py

    - name: Check protocol version consistency
      run: |
        python scripts/check_protocol_version.py

  # Documentation building
  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: [python-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Build Sphinx documentation
      run: |
        cd docs/
        make html

    - name: Check documentation links
      run: |
        python scripts/check_doc_links.py

    - name: Generate API documentation
      run: |
        sphinx-apidoc -o docs/api/ src/
        cd docs/
        make html

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/

  # Release automation
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [security, python-tests, protocol-validation, documentation]
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Verify package
      run: twine check dist/*

    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog from commits
        CHANGELOG=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD~1)..HEAD)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.changelog.outputs.version }}
        body: |
          ## Changes in ${{ steps.changelog.outputs.version }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Protocol Compatibility
          This release maintains backward compatibility with AMP 1.x protocol versions.
          
          ## Installation
          ```bash
          pip install agentmeshprotocol==${{ steps.changelog.outputs.version }}
          ```
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/
        asset_name: release-artifacts
        asset_content_type: application/zip

  # Notification and status updates
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    if: always()
    needs: [security, python-tests, protocol-validation, documentation]

    steps:
    - name: Notify on success
      if: ${{ needs.security.result == 'success' && needs.python-tests.result == 'success' && needs.protocol-validation.result == 'success' && needs.documentation.result == 'success' }}
      run: |
        echo "✅ All checks passed successfully!"

    - name: Notify on failure
      if: ${{ needs.security.result == 'failure' || needs.python-tests.result == 'failure' || needs.protocol-validation.result == 'failure' || needs.documentation.result == 'failure' }}
      run: |
        echo "❌ Some checks failed. Please review the logs."
        exit 1